race::planning::race_decision_engine::ros_parameters:
  step_time_period_sec: {
    type: double,
    read_only: true,
    description: "The time period (in seconds) of the step function in RDE that publishes",
    validation: {
      gt<>: 0.0
    }
  }
  non_critical_log_time_period_ms: {
    type: int,
    read_only: false,
    description: "The time period (in milliseconds) at which the non critical logs get logged",
    validation: {
      gt<>: 0
    }
  }
  use_perception: {
    type: bool,
    read_only: false,
    description: "Whether or not the RDE should subscribe to perception"
  }
  use_params: {
    type: bool,
    read_only: false,
    description: "Whether or not the RDE should subscribe to params"
  }
  ttl_csv_dir: {
    type: string,
    read_only: true,
    description: "CSV directory to read TTLs from",
    validation: {
      not_empty<>: null
    }
  }
  start_in_pit: {
    type: bool,
    read_only: true,
    description: "Whether we should initialize the stack on the pit line"
  }
  num_start_laps: {
    type: int,
    read_only: true,
    description: "Number of laps completed to be encoded in RDE",
    validation: {
      gt_eq<>: 0
    }
  }
  cte_threshold: {
    type: double,
    read_only: false,
    description: "CTE threshold (in m) below which we classify ourselves as being on one half of the lines",
    validation: {
      gt<>: 0.0
    }
  }
  cte_merge_threshold: {
    type: double,
    read_only: false,
    description: "CTE merge threshold (in m) below which we classify ourselves safe to merge back to the racing line",
    validation: {
      gt<>: 0.0
    }
  }
  lap_threshold: {
    type: double,
    read_only: false,
    description: "Threshold (in m) at which we increment lap number if we cross it",
    validation: {
      gt<>: 0.0
    }
  }
  passing_sf_threshold: {
    type: double,
    read_only: false,
    description: "Threshold (in m) at which we indicate we passed the passing SF if we cross it",
    validation: {
      gt<>: 0.0
    }
  }
  back_straight: {
    start_percentage: {
      type: double,
      read_only: false,
      description: "Percentage of the track at which the back straight starts",
      validation: {
        bounds<>: [0.0, 100.0]
      }
    },
    end_percentage: {
      type: double,
      read_only: false,
      description: "Percentage of the track at which the back straight ends",
      validation: {
        bounds<>: [0.0, 100.0]
      }
    }
  }
  manual_overrides: {
    auto_enabled: {
      type: bool,
      read_only: false,
      description: "Whether to enable autonomous or not"
    },
    limit_auto_throttle: {
      type: bool,
      read_only: false,
      description: "Whether to limit the autonomous throttle by manual value"
    }
  }
  timeout: {
    manual: {
      localization_timeout: {
        type: double,
        read_only: false,
        description: "Contains value in seconds at which we consider a timeout of localization messages during manual operations",
        validation: {
          gt<>: 0.0
        }
      },
      race_control_timeout: {
        type: double,
        read_only: false,
        description: "Contains value in seconds at which we consider a timeout of race control messages during manual operations",
        validation: {
          gt<>: 0.0
        }
      },
      input_manual_command_timeout: {
        type: double,
        read_only: false,
        description: "Contains value in seconds at which we consider a timeout of input manual command messages during manual operations",
        validation: {
          gt<>: 0.0
        }
      },
      opp_car_detections_timeout: {
        type: double,
        read_only: false,
        description: "Contains value in seconds at which we consider a timeout of opp car detection messages during manual operations",
        validation: {
          gt<>: 0.0
        }
      },
      low_level_fault_timeout: {
        type: double,
        read_only: false,
        description: "Contains value in seconds at which we consider a timeout of low level fault messages during manual operations",
        validation: {
          gt<>: 0.0
        }
      }
    },
    autonomous: {
      localization_timeout: {
        type: double,
        read_only: false,
        description: "Contains value in seconds at which we consider a timeout of localization messages during autonomous operations",
        validation: {
          gt<>: 0.0
        }
      },
      race_control_timeout: {
        type: double,
        read_only: false,
        description: "Contains value in seconds at which we consider a timeout of race control messages during autonomous operations",
        validation: {
          gt<>: 0.0
        }
      },
      input_manual_command_timeout: {
        type: double,
        read_only: false,
        description: "Contains value in seconds at which we consider a timeout of input manual command messages during autonomous operations",
        validation: {
          gt<>: 0.0
        }
      },
      opp_car_detections_timeout: {
        type: double,
        read_only: false,
        description: "Contains value in seconds at which we consider a timeout of opp car detection messages during autonomous operations",
        validation: {
          gt<>: 0.0
        }
      },
      low_level_fault_timeout: {
        type: double,
        read_only: false,
        description: "Contains value in seconds at which we consider a timeout of low level fault messages during autonomous operations",
        validation: {
          gt<>: 0.0
        }
      }
    }
  }
  speed_limit: {
    pit_lane: {
      type: double,
      read_only: false,
      description: "Pit lane speed limit in mph",
      validation: {
        gt_eq<>: 0.0
      }
    },
    pit_road: {
      type: double,
      read_only: false,
      description: "Pit road speed limit in mph",
      validation: {
        gt_eq<>: 0.0
      }
    },
    pit_crawl: {
      type: double,
      read_only: false,
      description: "Pit crawl speed limit in mph",
      validation: {
        gt_eq<>: 0.0
      }
    },
    yellow: {
      type: double,
      read_only: false,
      description: "Yellow speed limit in mph",
      validation: {
        gt_eq<>: 0.0
      }
    },
    green: {
      type: double,
      read_only: false,
      description: "Green speed limit in mph",
      validation: {
        gt_eq<>: 0.0
      }
    },
    max: {
      type: double,
      read_only: false,
      description: "Max speed limit in mph",
      validation: {
        gt_eq<>: 0.0
      }
    }
  }
  speed_modifiers: {
    overtaking: {
      type: double_array,
      read_only: false,
      description: "Speed modifier for overtaking in mph",
      validation: {
        size_gt<>: 1,
        "race::planning::race_decision_engine::custom_validators::each_element_lower_bound": 0.0
      }
    },
    catchup: {
      type: double_array,
      read_only: false,
      description: "Speed modifier for catchup in mph",
      validation: {
        size_gt<>: 1,
        "race::planning::race_decision_engine::custom_validators::each_element_lower_bound": 0.0
      }
    },
    speed_threshold_for_overtaking: {
      type: double_array,
      read_only: false,
      description: "Max speed for overtaking in mph",
      validation: {
        size_gt<>: 1,
        "race::planning::race_decision_engine::custom_validators::each_element_lower_bound": 0.0,
        "race::planning::race_decision_engine::custom_validators::each_element_upper_bound": 300.0,
        "race::planning::race_decision_engine::custom_validators::check_array_strictly_increasing": null,
      }
    },
    speed_threshold_for_catchup: {
      type: double_array,
      read_only: false,
      description: "Max speed for catchup in mph",
      validation: {
        size_gt<>: 1,
        "race::planning::race_decision_engine::custom_validators::each_element_lower_bound": 0.0,
        "race::planning::race_decision_engine::custom_validators::each_element_upper_bound": 300.0,
        "race::planning::race_decision_engine::custom_validators::check_array_strictly_increasing": null,
      }
    }
  }
  ttls: {
    left_ttl_index: {
      type: int,
      read_only: false,
      description: "The ttl index of the left TTL",
      validation: {
        gt<>: 0
      }
    },
    right_ttl_index: {
      type: int,
      read_only: false,
      description: "The ttl index of the right TTL",
      validation: {
        gt<>: 0
      }
    },
    pit_ttl_index: {
      type: int,
      read_only: false,
      description: "The ttl index of the pit TTL",
      validation: {
        gt<>: 0
      }
    },
    race_ttl_index: {
      type: int,
      read_only: false,
      description: "The ttl index of the race TTL",
      validation: {
        gt<>: 0
      }
    },
    optimal_ttl_index: {
      type: int,
      read_only: false,
      description: "The ttl index of the optimal TTL",
      validation: {
        gt<>: 0
      }
    },
  }
  gaps: {
    object_detection: {
      type: double,
      read_only: false,
      description: "The gap (in m) that the object detection should be used",
      validation: {
        gt<>: 0.0
      }
    },
    attacker_preparing: {
      type: double,
      read_only: false,
      description: "The gap (in m) that the attacker should hold while waiting for overtake signal",
      validation: {
        gt<>: 0.0
      }
    },
    attacker_attacking: {
      type: double,
      read_only: false,
      description: "The gap (in m) that the attacker should hold when ready to start a overtake",
      validation: {
        gt<>: 0.0
      }
    },
    defender_overtaken: {
      type: double,
      read_only: false,
      description: "The gap (in m) that the defender should hold when overtaken",
      validation: {
        gt<>: 0.0
      }
    },
    defender_vicinity: {
      type: double,
      read_only: false,
      description: "The gap (in m) that the defender should hold lines when near the attacker",
      validation: {
        gt<>: 0.0
      }
    },
    attacker_done: {
      type: double,
      read_only: false,
      description: "The gap (in m) that the attacker should open before declaring overtake done",
      validation: {
        gt<>: 0.0
      }
    }
  }
  behavior_tree: {
    bt_fp: {
      type: string,
      read_only: true,
      description: "The behavior tree file to load",
      validation: {
        not_empty<>: null
      }
    },
    log_fp: {
      type: string,
      read_only: true,
      description: "Log file for BT Node",
      validation: {
        not_empty<>: null
      }
    },
    zmq_max_msgs_per_sec: {
      type: int,
      read_only: true,
      description: "Max messages the BT can send through ZMQ per cycle",
      validation: {
        gt<>: 0
      }
    },
    groot_publisher_port: {
      type: int,
      read_only: true,
      description: "The port on which ZMQ must publish",
      validation: {
        gt<>: 0
      }
    },
    groot_server_port: {
      type: int,
      read_only: true,
      description: "The port on which ZMQ messages are received",
      validation: {
        gt<>: 0
      }
    },
    groot_ip_addr: {
      type: string,
      read_only: true,
      description: "The IP address to send ZMQ messages too",
      validation: {
        not_empty<>: null
      }
    }
  }
  target_speed_profiles: {
    enabled: {
      type: bool,
      read_only: false,
      description: "Whether or not to use target speed profiles"
    },
    tsp_name: {
      type: string,
      read_only: false,
      description: "Name of TSP profile",
      validation: {
        not_empty<>: null
      }
    },
    tsp_segment_names: {
      type: string_array,
      read_only: false,
      description: "TSP Segment Names",
      validation: {
        size_gt<>: 1
      }
    },
    lap_percentages: {
      type: double_array,
      read_only: false,
      description: "The lap percentages at which the target speed profiles are applied. Must contain 0% and 100%",
      validation: {
        size_gt<>: 1,
        "race::planning::race_decision_engine::custom_validators::each_element_lower_bound": 0.0,
        "race::planning::race_decision_engine::custom_validators::each_element_upper_bound": 100.0,
        "race::planning::race_decision_engine::custom_validators::check_array_strictly_increasing": null,
        "race::planning::race_decision_engine::custom_validators::check_array_starts_with": 0.0,
        "race::planning::race_decision_engine::custom_validators::check_array_ends_with": 100.0
        }
    },
    speed_profiles: {
      type: double_array,
      read_only: false,
      description: "The target speed profiles to follow at each percentage. It will linearly interpolate in between the percentages",
      validation: {
        size_gt<>: 1,
        "race::planning::race_decision_engine::custom_validators::each_element_lower_bound": 0.0,
      }
    }
  }
  scale_factors: {
    enabled: {
      type: bool,
      read_only: false,
      description: "Whether or not to use scale factors"
    },
    lap_percentages: {
      type: double_array,
      read_only: false,
      description: "The lap percentages at which the scale factors are applied. Must contain 0% and 100%",
      validation: {
        size_gt<>: 1,
        "race::planning::race_decision_engine::custom_validators::each_element_lower_bound": 0.0,
        "race::planning::race_decision_engine::custom_validators::each_element_upper_bound": 100.0,
        "race::planning::race_decision_engine::custom_validators::check_array_strictly_increasing": null,
        "race::planning::race_decision_engine::custom_validators::check_array_starts_with": 0.0,
        "race::planning::race_decision_engine::custom_validators::check_array_ends_with": 100.0
        }
    },
    scale_factors: {
      type: double_array,
      read_only: false,
      description: "The scale factors to follow at each percentage. If in between it will choose the scale factor at the previous percentage",
      validation: {
        size_gt<>: 1,
        "race::planning::race_decision_engine::custom_validators::each_element_lower_bound": 0.0,
      }
    }
  }
  passing_zones: {
    enabled: {
      type: bool,
      read_only: false,
      description: "Whether or not to use scale factors"
    },
    start_percentages: {
      type: double_array,
      read_only: false,
      description: "The start percentage of the passing zones",
      validation: {
        size_gt<>: 0,
        "race::planning::race_decision_engine::custom_validators::each_element_lower_bound": 0.0,
        "race::planning::race_decision_engine::custom_validators::each_element_upper_bound": 100.0
      }
    },
    end_percentages: {
      type: double_array,
      read_only: false,
      description: "The end percentage of the passing zones",
      validation: {
        size_gt<>: 0,
        "race::planning::race_decision_engine::custom_validators::each_element_lower_bound": 0.0,
        "race::planning::race_decision_engine::custom_validators::each_element_upper_bound": 100.0
      }
    },
    max_speeds: {
      type: double_array,
      read_only: false,
      description: "The max speeds of the passing zones in which the car will attempt to pass",
      validation: {
        size_gt<>: 0,
        "race::planning::race_decision_engine::custom_validators::each_element_lower_bound": 0.0,
        "race::planning::race_decision_engine::custom_validators::each_element_upper_bound": 300.0
      }
    }
  }
  passing_lines: {
    percentages: {
      type: double_array,
      read_only: false,
      description: "The percentages of the passing lines",
      validation: {
        size_gt<>: 0,
        "race::planning::race_decision_engine::custom_validators::each_element_lower_bound": 0.0,
        "race::planning::race_decision_engine::custom_validators::each_element_upper_bound": 100.0
      }
    }
  }
