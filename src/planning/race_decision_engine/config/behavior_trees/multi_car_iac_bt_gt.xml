<?xml version="1.0"?>
<root main_tree_to_execute="BehaviorTree">
	<BehaviorTree ID="BehaviorTree">
		<ReactiveSequence>
			<!-- Set Flags, Car State, and Increment Laps-->
			<ReactiveSequence> <!-- Set Flags -->
				<ForceSuccess>
					<ReactiveFallback>
						<Condition ID="IfRaceControlTimeout" rde_params="{rde_params}" rde_inputs="{rde_inputs}"/>
						<Action ID="SetFlags" rde_inputs="{rde_inputs}" previous_flags="{previous_flags}" current_round_speed="{current_round_speed}" current_flags="{current_flags}"/>
					</ReactiveFallback>
				</ForceSuccess>
				<ForceSuccess> <!-- Set Car State and Increment Laps -->
					<ReactiveFallback>
						<Condition ID="IfLocalizationTimeout" rde_params="{rde_params}" rde_inputs="{rde_inputs}"/>
						<Condition ID="IfLocalizationEmergency" rde_params="{rde_params}" rde_inputs="{rde_inputs}"/>
						<ReactiveSequence>
							<Action ID="SetCarState" rde_params="{rde_params}" rde_inputs="{rde_inputs}" current_ttl_index="{current_ttl_index}" left_ttl_index="{left_ttl_index}" right_ttl_index="{right_ttl_index}" previous_car_state="{previous_car_state}" current_car_state="{current_car_state}"/>
							<ForceSuccess>
								<ReactiveSequence>
									<Condition ID="IfCrossedSf" rde_params="{rde_params}" previous_car_state="{previous_car_state}" current_car_state="{current_car_state}"/>
									<Action ID="IncrementLap" previous_car_state="{previous_car_state}" current_car_state="{current_car_state}" num_laps="{num_laps}"/>
								</ReactiveSequence>
							</ForceSuccess>
						</ReactiveSequence>
					</ReactiveFallback>
				</ForceSuccess>
				<ForceSuccess> <!-- Reset Overtake Flags -->
					<ReactiveSequence>
						<Inverter>
							<Condition ID="IfWgreenFlag" current_flags="{current_flags}"/>
						</Inverter>
						<Action ID="SetAllowedToOvertake" rde_params="{rde_params}" target_value="false" allowed_to_overtake="{allowed_to_overtake}"/>
						<Action ID="SetAttackerOvertakeComplete" rde_params="{rde_params}" target_value="false" attacker_overtake_complete="{attacker_overtake_complete}"/>
						<Action ID="SetDefenderOvertakeComplete" rde_params="{rde_params}" target_value="false" defender_overtake_complete="{defender_overtake_complete}"/>
						<Action ID="SetAttackerOvertakeStarted" rde_params="{rde_params}" target_value="false" attacker_overtake_started="{attacker_overtake_started}"/>
						<Action ID="SetDefenderOvertakeStarted" rde_params="{rde_params}" target_value="false" defender_overtake_started="{defender_overtake_started}"/>
					</ReactiveSequence>
				</ForceSuccess>
				<ForceSuccess> <!-- Set Allowed to overtake -->
					<ReactiveSequence>
						<Condition ID="IfWgreenFlag" current_flags="{current_flags}"/>
						<Condition ID="IfCrossedPassingLine" rde_params="{rde_params}" previous_car_state="{previous_car_state}" current_car_state="{current_car_state}"/>
						<Action ID="SetAllowedToOvertake" allowed_to_overtake="{allowed_to_overtake}" rde_params="{rde_params}" target_value="true"/>
					</ReactiveSequence>
				</ForceSuccess>
				<ForceSuccess> <!-- Fill Rival Car Info -->
					<ReactiveSequence>
					<Condition ID="IfUsePerception" rde_params="{rde_params}"/>
					<ReactiveFallback>
						<ReactiveSequence>
							<Condition ID="IfNoTrackedObjects" rde_inputs="{rde_inputs}"/>
							<Action ID="CreateFalseRivalCar" rde_params="{rde_params}" rival_car="{rival_car}"/>
							<Action ID="FillRivalCarInfo" rde_params="{rde_params}" rde_inputs="{rde_inputs}" current_ttl_index="{current_ttl_index}" left_ttl_index="{left_ttl_index}" right_ttl_index="{right_ttl_index}" rival_car="{rival_car}" previous_rival_car="{previous_rival_car}" current_rival_car="{current_rival_car}"/>
						</ReactiveSequence>
						<ReactiveSequence>
							<Action ID="SetClosestRivalCar" rde_params="{rde_params}" rde_inputs="{rde_inputs}" current_car_state="{current_car_state}" rival_car="{rival_car}"/>
							<Action ID="FillRivalCarInfo" rde_params="{rde_params}" rde_inputs="{rde_inputs}" current_ttl_index="{current_ttl_index}" left_ttl_index="{left_ttl_index}" right_ttl_index="{right_ttl_index}" rival_car="{rival_car}" previous_rival_car="{previous_rival_car}" current_rival_car="{current_rival_car}"/>
						</ReactiveSequence>
						</ReactiveFallback>
					</ReactiveSequence>
				</ForceSuccess>
				<ForceSuccess> <!-- Pitting Behavior -->
					<ReactiveFallback>
						<ReactiveSequence>
							<Condition ID="IfBlackFlag" current_flags="{current_flags}"/>
							<Condition ID="IfInPitBox" current_car_state="{current_car_state}" pit_ttl_index="{pit_ttl_index}"/>
							<Action ID="SetToPitting" rde_params="{rde_params}" target_value="true" is_pitting="{is_pitting}"/>	
						</ReactiveSequence>
						<ReactiveSequence>
							<Inverter>
								<Condition ID="IfBlackFlag" current_flags="{current_flags}"/>
							</Inverter>
							<Action ID="SetToPitting" rde_params="{rde_params}" target_value="false" is_pitting="{is_pitting}"/>
						</ReactiveSequence>
					</ReactiveFallback>
				</ForceSuccess>
				<ForceSuccess> <!-- This mode does not require Push2Pass -->
					<ReactiveSequence>
						<Inverter>
							<Condition ID="IfWgreenFlag" current_flags="{current_flags}"/>
						</Inverter>
						<Action ID="SetPush2PassInactive" push2pass_cmd="{push2pass_cmd}"/>
					</ReactiveSequence>
				</ForceSuccess>
			</ReactiveSequence>
			<!--Security Checks: 3 Emergency Stops, 6 Immediatate Stops, 9 Safe Stops-->
			<ReactiveFallback>
				<ReactiveSequence> <!-- Set Emergency Stop -->
					<ReactiveFallback>
						<Condition ID="IfPurpleFlag" current_flags="{current_flags}"/>
						<Condition ID="IfLowLevelFaultEmergencyStop" rde_inputs="{rde_inputs}" rde_params="{rde_params}"/>
						<Condition ID="IfInputManualCommandEmergency" rde_inputs="{rde_inputs}" rde_params="{rde_params}"/>
						<Condition ID="IfLocalizationEmergency" rde_inputs="{rde_inputs}" rde_params="{rde_params}"/>
					</ReactiveFallback>
					<Action ID="StopCarEmergency" rde_params="{rde_params}" speed_type="{speed_type}" stop_type="{stop_type}" strategy_type="{strategy_type}"/>
					<Action ID="SetNoGap" gap_type="{gap_type}" rde_params="{rde_params}"/>
				</ReactiveSequence>
				<ReactiveSequence> <!-- Set Immediate Stop -->
					<ReactiveFallback>
						<Condition ID="IfLowLevelFaultTimeout" rde_inputs="{rde_inputs}" rde_params="{rde_params}"/>
						<Condition ID="IfLocalizationTimeout" rde_inputs="{rde_inputs}" rde_params="{rde_params}"/>
						<Condition ID="IfLowLevelFaultImmediateStop" rde_inputs="{rde_inputs}" rde_params="{rde_params}"/>
						<Condition ID="IfEkillFlag" current_flags="{current_flags}"/>
						<ReactiveSequence>
							<Condition ID="IfUsePerception" rde_params="{rde_params}"/>
							<Condition ID="IfOppCarDetectionTimeout" rde_inputs="{rde_inputs}" rde_params="{rde_params}"/>
						</ReactiveSequence>
						<Condition ID="IfLowLevelFaultSafeStop" rde_inputs="{rde_inputs}" rde_params="{rde_params}"/>
					</ReactiveFallback>
					<Action ID="StopCarImmediate" rde_params="{rde_params}" speed_type="{speed_type}" stop_type="{stop_type}" strategy_type="{strategy_type}"/>
					<Action ID="SetNoGap" gap_type="{gap_type}" rde_params="{rde_params}"/>
				</ReactiveSequence>
				<ReactiveSequence> <!-- Set Safe Stop -->
					<ReactiveFallback>
						<Condition ID="IfLowLevelFaultSafeStop" rde_inputs="{rde_inputs}" rde_params="{rde_params}"/>
						<Condition ID="IfInputManualCommandTimeout" rde_inputs="{rde_inputs}" rde_params="{rde_params}"/>
						<Condition ID="IfRaceControlTimeout" rde_inputs="{rde_inputs}" rde_params="{rde_params}"/>
						<Condition ID="IfNoTrackFlag" current_flags="{current_flags}"/>
						<Condition ID="IfRedFlag" current_flags="{current_flags}"/>
						<Condition ID="IfStopFlag" current_flags="{current_flags}"/>
						<Condition ID="IfOrangeFlag" current_flags="{current_flags}"/>
					</ReactiveFallback>
					<Action ID="StopCarSafe" rde_params="{rde_params}" speed_type="{speed_type}" stop_type="{stop_type}" strategy_type="{strategy_type}"/>
					<Action ID="SetNoGap" gap_type="{gap_type}" rde_params="{rde_params}"/>
				</ReactiveSequence>
				<!-- On Pit Behavior -->
				<ReactiveSequence> <!-- Set Pit Crawl Speed -->
					<Condition ID="IfInPitTtl" current_car_state="{current_car_state}" pit_ttl_index="{pit_ttl_index}"/>
					<ReactiveFallback>
						<Condition ID="IfInPitCrawl" current_car_state="{current_car_state}" pit_ttl_index="{pit_ttl_index}"/>
						<Condition ID="IfInPitBox" current_car_state="{current_car_state}" pit_ttl_index="{pit_ttl_index}"/>
					</ReactiveFallback>
					<Inverter>
						<Condition ID="IfPitting" is_pitting="{is_pitting}"/>
					</Inverter>
					<Action ID="SetPitCrawlSpeed" rde_params="{rde_params}" speed_type="{speed_type}" stop_type="{stop_type}" strategy_type="{strategy_type}"/> 
					<Action ID="SetNoGap" gap_type="{gap_type}" rde_params="{rde_params}"/>
					<ForceSuccess> <!-- DEFENSIVE -->
						<ReactiveSequence>
							<Condition ID="IfUsePerception" rde_params="{rde_params}"/>
							<Condition ID="IfRivalCarExists" current_rival_car="{current_rival_car}"/>
							<Condition ID="IfRivalEgoTtlsMatch" current_rival_car="{current_rival_car}" current_car_state="{current_car_state}"/>
							<Condition ID="IfRivalCarFront" current_rival_car="{current_rival_car}"/>
							<Condition ID="IfRivalCarFrontGapLesserThan" comparison_against="attacker_attacking" current_rival_car="{current_rival_car}" rde_params="{rde_params}" />
							<Action ID="SetAttackerPreparingGap" gap_type="{gap_type}" rde_params="{rde_params}"/>
							<Action ID="SetFollowMode" strategy_type="{strategy_type}"/>
						</ReactiveSequence>
					</ForceSuccess>
				</ReactiveSequence>
				<ReactiveSequence> <!-- Set Pit Lane Speed -->
					<Condition ID="IfInPitTtl" current_car_state="{current_car_state}" pit_ttl_index="{pit_ttl_index}"/>
					<Condition ID="IfInPitLane" current_car_state="{current_car_state}" pit_ttl_index="{pit_ttl_index}"/>
					<Inverter> 
						<Condition ID="IfPitting" is_pitting="{is_pitting}"/>
					</Inverter>
					<Action ID="SetPitLaneSpeed" rde_params="{rde_params}" speed_type="{speed_type}" stop_type="{stop_type}" strategy_type="{strategy_type}"/>
					<Action ID="SetNoGap" gap_type="{gap_type}" rde_params="{rde_params}"/>
					<ForceSuccess> <!-- DEFENSIVE -->
						<ReactiveSequence>
							<Condition ID="IfUsePerception" rde_params="{rde_params}"/>
							<Condition ID="IfRivalCarExists" current_rival_car="{current_rival_car}"/>
							<Condition ID="IfRivalEgoTtlsMatch" current_rival_car="{current_rival_car}" current_car_state="{current_car_state}"/>
							<Condition ID="IfRivalCarFront" current_rival_car="{current_rival_car}"/>
							<Condition ID="IfRivalCarFrontGapLesserThan" comparison_against="attacker_attacking" current_rival_car="{current_rival_car}" rde_params="{rde_params}" />
							<Action ID="SetAttackerPreparingGap" gap_type="{gap_type}" rde_params="{rde_params}"/>
							<Action ID="SetFollowMode" strategy_type="{strategy_type}"/>
						</ReactiveSequence>
					</ForceSuccess>
				</ReactiveSequence>
				<ReactiveSequence> <!-- Set Pit Road speed-->
					<Condition ID="IfInPitTtl" current_car_state="{current_car_state}" pit_ttl_index="{pit_ttl_index}"/>
					<Inverter>
						<ReactiveFallback>
							<Condition ID="IfInPitLane" current_car_state="{current_car_state}" pit_ttl_index="{pit_ttl_index}"/>
							<Condition ID="IfInPitBox" current_car_state="{current_car_state}" pit_ttl_index="{pit_ttl_index}"/>
						</ReactiveFallback>
					</Inverter>
					<Action ID="SetPitRoadSpeed" rde_params="{rde_params}" speed_type="{speed_type}" stop_type="{stop_type}" strategy_type="{strategy_type}"/>
					<Action ID="SetNoGap" gap_type="{gap_type}" rde_params="{rde_params}"/>
					<ForceSuccess> <!-- DEFENSIVE -->
						<ReactiveSequence>
							<Condition ID="IfUsePerception" rde_params="{rde_params}"/>
							<Condition ID="IfRivalCarExists" current_rival_car="{current_rival_car}"/>
							<Condition ID="IfRivalEgoTtlsMatch" current_rival_car="{current_rival_car}" current_car_state="{current_car_state}"/>
							<Condition ID="IfRivalCarFront" current_rival_car="{current_rival_car}"/>
							<Condition ID="IfRivalCarFrontGapLesserThan" comparison_against="attacker_attacking" current_rival_car="{current_rival_car}" rde_params="{rde_params}" />
							<Action ID="SetAttackerPreparingGap" gap_type="{gap_type}" rde_params="{rde_params}"/>
							<Action ID="SetFollowMode" strategy_type="{strategy_type}"/>
						</ReactiveSequence>
					</ForceSuccess>
				</ReactiveSequence>
				<!-- On Track Behavior -->
				<ReactiveSequence> <!-- Set Yellow Speed-->
					<Inverter>
						<Condition ID="IfInPitTtl" current_car_state="{current_car_state}" pit_ttl_index="{pit_ttl_index}"/>
					</Inverter>
					<ReactiveFallback>
						<Condition ID="IfFcyFlag" current_flags="{current_flags}"/>
						<Condition ID="IfYellowFlag" current_flags="{current_flags}"/>
					</ReactiveFallback>
					<Action ID="SetYellowSpeed" rde_params="{rde_params}" speed_type="{speed_type}" stop_type="{stop_type}" strategy_type="{strategy_type}"/>
					<Action ID="SetNoGap" gap_type="{gap_type}" rde_params="{rde_params}"/>
					<ForceSuccess> <!-- DEFENSIVE -->
						<ReactiveSequence>
							<Condition ID="IfUsePerception" rde_params="{rde_params}"/>
							<Condition ID="IfRivalCarExists" current_rival_car="{current_rival_car}"/>
							<Condition ID="IfRivalEgoTtlsMatch" current_rival_car="{current_rival_car}" current_car_state="{current_car_state}"/>
							<Condition ID="IfRivalCarFront" current_rival_car="{current_rival_car}"/>
							<Condition ID="IfRivalCarFrontGapLesserThan" comparison_against="object_detection" current_rival_car="{current_rival_car}" rde_params="{rde_params}" />
							<Action ID="SetAttackerPreparingGap" gap_type="{gap_type}" rde_params="{rde_params}"/>
							<Action ID="SetFollowMode" strategy_type="{strategy_type}"/>
						</ReactiveSequence>
					</ForceSuccess>
				</ReactiveSequence>
				<ReactiveSequence> <!-- Set Green Speed, null flag -->
					<Inverter>
						<Condition ID="IfInPitTtl" current_car_state="{current_car_state}" pit_ttl_index="{pit_ttl_index}"/>
					</Inverter>
					<ReactiveFallback>
						<ReactiveSequence>
							<Condition ID="IfUseParams" rde_params="{rde_params}"/>
							<Condition ID="IfGreenFlag" current_flags="{current_flags}"/>
							<Action ID="SetGreenSpeed" rde_params="{rde_params}" speed_type="{speed_type}" stop_type="{stop_type}" strategy_type="{strategy_type}"/>
						</ReactiveSequence>
						<ReactiveSequence>
							<Condition ID="IfGreenFlag" current_flags="{current_flags}"/>
							<Action ID="SetGreenSpeed" rde_params="{rde_params}" speed_type="{speed_type}" stop_type="{stop_type}" strategy_type="{strategy_type}"/>
						</ReactiveSequence>
						<ReactiveSequence>
							<Condition ID="IfGreenSpeedFlag" current_flags="{current_flags}"/>
							<Condition ID="IfAttackerFlag" current_flags="{current_flags}"/>
							<Action ID="SetRoundCatchupSpeed" speed_type="{speed_type}" stop_type="{stop_type}" strategy_type="{strategy_type}"/>
						</ReactiveSequence>
						<ReactiveSequence>
							<ReactiveFallback>
								<Condition ID="IfGreenSpeedFlag" current_flags="{current_flags}"/>
								<ReactiveSequence>
									<Condition ID="IfWgreenFlag" current_flags="{current_flags}"/>
									<Inverter>
										<Condition ID="IfDefenderFlag" current_flags="current_flags"/>
									</Inverter>
									<Inverter>
										<Condition ID="IfAttackerFlag" current_flags="current_flags"/>
									</Inverter>
								</ReactiveSequence>
							</ReactiveFallback>
							<Action ID="SetRoundSpeed" speed_type="{speed_type}" stop_type="{stop_type}" strategy_type="{strategy_type}"/>
						</ReactiveSequence>
					</ReactiveFallback>
					<Action ID="SetNoGap" gap_type="{gap_type}" rde_params="{rde_params}"/>
					<ForceSuccess> <!-- DEFENSIVE -->
						<ReactiveSequence>
							<Condition ID="IfUsePerception" rde_params="{rde_params}"/>
							<Condition ID="IfRivalCarExists" current_rival_car="{current_rival_car}"/>
							<Condition ID="IfRivalCarFront" current_rival_car="{current_rival_car}"/>
							<Condition ID="IfRivalCarFrontGapLesserThan" comparison_against="object_detection" current_rival_car="{current_rival_car}" rde_params="{rde_params}" />
							<Action ID="SetAttackerPreparingGap" gap_type="{gap_type}" rde_params="{rde_params}"/>
							<Action ID="SetFollowMode" strategy_type="{strategy_type}"/>
						</ReactiveSequence>
					</ForceSuccess>
				</ReactiveSequence>
				<ReactiveSequence> <!-- Defender Flag, before overtake -->
					<Inverter>
						<ReactiveFallback>
							<Condition ID="IfInPitTtl" current_car_state="{current_car_state}" pit_ttl_index="{pit_ttl_index}"/>
							<Condition ID="IfDefenderOvertakeStarted" defender_overtake_started="{defender_overtake_started}"/>
							<Condition ID="IfDefenderOvertakeComplete" defender_overtake_complete="{defender_overtake_complete}"/>
						</ReactiveFallback>
					</Inverter>
					<Condition ID="IfDefenderFlag" current_flags="current_flags"/>
					<ReactiveFallback>
						<ReactiveSequence>
							<ReactiveFallback>	
								<Condition ID="IfGreenSpeedFlag" current_flags="{current_flags}"/>
								<Condition ID="IfWgreenFlag" current_flags="{current_flags}"/>
							</ReactiveFallback>
							<Action ID="SetRoundSpeed" speed_type="{speed_type}" stop_type="{stop_type}" strategy_type="{strategy_type}"/>
						</ReactiveSequence>
						<ReactiveSequence>	
							<Condition ID="IfGreenFlag" current_flags="{current_flags}"/>
							<Action ID="SetGreenSpeed" rde_params="{rde_params}" speed_type="{speed_type}" stop_type="{stop_type}" strategy_type="{strategy_type}"/>
						</ReactiveSequence>
					</ReactiveFallback>
					<Action ID="SetRaceTtlIndex" rde_params="{rde_params}" selected_ttl="{selected_ttl}"/>
					<Action ID="SetNoGap" gap_type="{gap_type}" rde_params="{rde_params}"/>
					<ForceSuccess>
						<ReactiveSequence>
							<Condition ID="IfUsePerception" rde_params="{rde_params}"/>
							<Condition ID="IfRivalCarExists" current_rival_car="{current_rival_car}"/>
							<ReactiveFallback>
								<ReactiveSequence>
									<Condition ID="IfRivalCarBack" current_rival_car="{current_rival_car}"/>
									<Condition ID="IfRivalCarBackGapLesserThan" comparison_against="defender_vicinity" current_rival_car="{current_rival_car}" rde_params="{rde_params}" />
									<Action ID="SetDefenderOvertakeStarted" defender_overtake_started="{defender_overtake_started}" rde_params="{rde_params}" target_value="true"/>
								</ReactiveSequence>
								<ReactiveSequence> <!--DEFENSIVE -->
									<Condition ID="IfRivalEgoTtlsMatch" current_rival_car="{current_rival_car}" current_car_state="{current_car_state}"/>
									<Condition ID="IfRivalCarFront" current_rival_car="{current_rival_car}"/>
									<Condition ID="IfRivalCarFrontGapLesserThan" comparison_against="defender_vicinity" current_rival_car="{current_rival_car}" rde_params="{rde_params}" />
									<Action ID="SetAttackerPreparingGap" gap_type="{gap_type}" rde_params="{rde_params}"/>
									<Action ID="SetFollowMode" strategy_type="{strategy_type}"/>
								</ReactiveSequence>
							</ReactiveFallback>
						</ReactiveSequence>
					</ForceSuccess>
				</ReactiveSequence>
				<ReactiveSequence> <!-- Defender Flag, during overtake started -->
					<Inverter>
						<ReactiveFallback>
							<Condition ID="IfInPitTtl" current_car_state="{current_car_state}" pit_ttl_index="{pit_ttl_index}"/>
							<Condition ID="IfDefenderOvertakeComplete" defender_overtake_complete="{defender_overtake_complete}"/>
						</ReactiveFallback>
					</Inverter>
					<Condition ID="IfDefenderFlag" current_flags="current_flags"/>
					<Condition ID="IfDefenderOvertakeStarted" defender_overtake_started="{defender_overtake_started}"/>
					<ReactiveFallback>
						<ReactiveSequence>	
							<ReactiveFallback>	
								<Condition ID="IfGreenSpeedFlag" current_flags="{current_flags}"/>
								<Condition ID="IfWgreenFlag" current_flags="{current_flags}"/>
							</ReactiveFallback>
							<Action ID="SetRoundSpeed" speed_type="{speed_type}" stop_type="{stop_type}" strategy_type="{strategy_type}"/>
						</ReactiveSequence>
						<ReactiveSequence>	
							<Condition ID="IfGreenFlag" current_flags="{current_flags}"/>
							<Action ID="SetGreenSpeed" rde_params="{rde_params}" speed_type="{speed_type}" stop_type="{stop_type}" strategy_type="{strategy_type}"/>
						</ReactiveSequence>
					</ReactiveFallback>
					<Action ID="SetRaceTtlIndex" rde_params="{rde_params}" selected_ttl="{selected_ttl}"/>
					<Action ID="SetNoGap" gap_type="{gap_type}" rde_params="{rde_params}"/>
					<ForceSuccess>
						<ReactiveSequence>
							<Condition ID="IfUsePerception" rde_params="{rde_params}"/>
							<Condition ID="IfRivalCarExists" current_rival_car="{current_rival_car}"/>
							<ForceSuccess>
								<ReactiveFallback>
									<ReactiveSequence>
										<Condition ID="IfEgoCarLeft" current_car_state="{current_car_state}" rde_params="{rde_params}" left_ttl_index="{left_ttl_index}" right_ttl_index="{right_ttl_index}"/>
										<ReactiveFallback>
											<ReactiveSequence>
												<Condition ID="IfRivalCarBack" current_rival_car="{current_rival_car}"/>
												<Condition ID="IfRivalCarBackGapLesserThan" comparison_against="defender_vicinity" current_rival_car="{current_rival_car}" rde_params="{rde_params}" />
											</ReactiveSequence>
											<ReactiveSequence>
												<Condition ID="IfRivalCarFront" current_rival_car="{current_rival_car}"/>
												<Condition ID="IfRivalCarFrontGapLesserThan" comparison_against="defender_vicinity" current_rival_car="{current_rival_car}" rde_params="{rde_params}" />
											</ReactiveSequence>
										</ReactiveFallback>
										<Action ID="SetLeftTtlIndex" rde_params="{rde_params}" selected_ttl="{selected_ttl}"/>
									</ReactiveSequence>
									<ReactiveSequence>
										<Condition ID="IfEgoCarRight" current_car_state="{current_car_state}" rde_params="{rde_params}" left_ttl_index="{left_ttl_index}" right_ttl_index="{right_ttl_index}"/>
										<ReactiveFallback>
											<ReactiveSequence>
												<Condition ID="IfRivalCarBack" current_rival_car="{current_rival_car}"/>
												<Condition ID="IfRivalCarBackGapLesserThan" comparison_against="defender_vicinity" current_rival_car="{current_rival_car}" rde_params="{rde_params}" />
											</ReactiveSequence>
											<ReactiveSequence>
												<Condition ID="IfRivalCarFront" current_rival_car="{current_rival_car}"/>
												<Condition ID="IfRivalCarFrontGapLesserThan" comparison_against="defender_vicinity" current_rival_car="{current_rival_car}" rde_params="{rde_params}" />
											</ReactiveSequence>
										</ReactiveFallback>
										<Action ID="SetRightTtlIndex" rde_params="{rde_params}" selected_ttl="{selected_ttl}"/>
									</ReactiveSequence>
								</ReactiveFallback>
							</ForceSuccess>
							<ForceSuccess>
								<ReactiveSequence>
									<Condition ID="IfRivalCarFront" current_rival_car="{current_rival_car}"/>
									<Condition ID="IfRivalCarFrontGapGreaterThan" comparison_against="defender_overtaken" current_rival_car="{current_rival_car}" rde_params="{rde_params}" />
									<Action ID="SetDefenderOvertakeComplete" defender_overtake_complete="{defender_overtake_complete}" rde_params="{rde_params}" target_value="true"/>
								</ReactiveSequence>
							</ForceSuccess>
							<ForceSuccess> <!-- DEFENSIVE -->
								<ReactiveSequence>
									<Condition ID="IfUsePerception" rde_params="{rde_params}"/>
									<Condition ID="IfRivalCarExists" current_rival_car="{current_rival_car}"/>
									<Condition ID="IfRivalEgoTtlsMatch" current_rival_car="{current_rival_car}" current_car_state="{current_car_state}"/>
									<Condition ID="IfRivalCarFront" current_rival_car="{current_rival_car}"/>
									<Condition ID="IfRivalCarFrontGapLesserThan" comparison_against="defender_vicinity" current_rival_car="{current_rival_car}" rde_params="{rde_params}" />
									<Action ID="SetAttackerAttackingGap" gap_type="{gap_type}" rde_params="{rde_params}"/>
									<Action ID="SetFollowMode" strategy_type="{strategy_type}"/>
								</ReactiveSequence>
							</ForceSuccess>
						</ReactiveSequence>
					</ForceSuccess>
				</ReactiveSequence>
				<ReactiveSequence> <!-- Defender Flag, overtake complete -->
					<Inverter>
						<Condition ID="IfInPitTtl" current_car_state="{current_car_state}" pit_ttl_index="{pit_ttl_index}"/>
					</Inverter>
					<Condition ID="IfDefenderFlag" current_flags="current_flags"/>
					<Condition ID="IfDefenderOvertakeComplete" defender_overtake_complete="{defender_overtake_complete}"/>
					<ReactiveFallback>
						<ReactiveSequence>	
							<ReactiveFallback>	
								<Condition ID="IfGreenSpeedFlag" current_flags="{current_flags}"/>
								<Condition ID="IfWgreenFlag" current_flags="{current_flags}"/>
							</ReactiveFallback>
							<Action ID="SetRoundSpeed" speed_type="{speed_type}" stop_type="{stop_type}" strategy_type="{strategy_type}"/>
						</ReactiveSequence>
						<ReactiveSequence>	
							<Condition ID="IfGreenFlag" current_flags="{current_flags}"/>
							<Action ID="SetGreenSpeed" rde_params="{rde_params}" speed_type="{speed_type}" stop_type="{stop_type}" strategy_type="{strategy_type}"/>
						</ReactiveSequence>
					</ReactiveFallback>
					<Action ID="SetRaceTtlIndex" rde_params="{rde_params}" selected_ttl="{selected_ttl}"/>
					<Action ID="SetNoGap" gap_type="{gap_type}" rde_params="{rde_params}"/>
					<ForceSuccess>
						<ReactiveSequence>
							<Condition ID="IfUsePerception" rde_params="{rde_params}"/>
							<Condition ID="IfRivalCarExists" current_rival_car="{current_rival_car}"/>
							<Condition ID="IfRivalCarFront" current_rival_car="{current_rival_car}"/>
							<Condition ID="IfRivalCarFrontGapLesserThan" comparison_against="defender_overtaken" current_rival_car="{current_rival_car}" rde_params="{rde_params}" />
							<Action ID="SetDefenderOvertakenGap" gap_type="{gap_type}" rde_params="{rde_params}"/>
							<Action ID="SetFollowMode" strategy_type="{strategy_type}"/>
						</ReactiveSequence>
					</ForceSuccess>
				</ReactiveSequence>
				<ReactiveSequence> <!-- Attacker Flag, before overtake -->
					<Inverter>
						<ReactiveFallback>
							<Condition ID="IfInPitTtl" current_car_state="{current_car_state}" pit_ttl_index="{pit_ttl_index}"/>
							<Condition ID="IfAttackerOvertakeStarted" attacker_overtake_started="{attacker_overtake_started}"/>
							<Condition ID="IfAttackerOvertakeComplete" attacker_overtake_complete="{attacker_overtake_complete}"/>
						</ReactiveFallback>
					</Inverter>
					<Condition ID="IfAttackerFlag" current_flags="current_flags"/>
					<ReactiveFallback>
						<ReactiveSequence>
							<ReactiveFallback>	
								<Condition ID="IfGreenSpeedFlag" current_flags="{current_flags}"/>
								<Condition ID="IfWgreenFlag" current_flags="{current_flags}"/>
							</ReactiveFallback>
							<Action ID="SetRoundCatchupSpeed" speed_type="{speed_type}" stop_type="{stop_type}" strategy_type="{strategy_type}"/>
						</ReactiveSequence>
						<ReactiveSequence>
							<Condition ID="IfGreenFlag" current_flags="{current_flags}"/>
							<Action ID="SetGreenSpeed" rde_params="rde_params" speed_type="{speed_type}" stop_type="{stop_type}" strategy_type="{strategy_type}"/>
						</ReactiveSequence>
						<Action ID="SetRoundSpeed" speed_type="{speed_type}" stop_type="{stop_type}" strategy_type="{strategy_type}"/>
					</ReactiveFallback>
					<Action ID="SetRaceTtlIndex" rde_params="{rde_params}" selected_ttl="{selected_ttl}"/>
					<Action ID="SetNoGap" gap_type="{gap_type}" rde_params="{rde_params}"/>
					<ForceSuccess>
						<ReactiveFallback>
							<ReactiveSequence>
								<Condition ID="IfAllowedToOvertake" allowed_to_overtake="{allowed_to_overtake}"/>
								<Condition ID="IfUsePerception" rde_params="{rde_params}"/>
								<Condition ID="IfRivalCarExists" current_rival_car="{current_rival_car}"/>
								<Condition ID="IfRivalCarFront" current_rival_car="{current_rival_car}"/>
								<Condition ID="IfRivalCarFrontGapLesserThan" comparison_against="object_detection" current_rival_car="{current_rival_car}" rde_params="{rde_params}" />
								<Action ID="SetAttackerAttackingGap" gap_type="{gap_type}" rde_params="{rde_params}"/>
								<Action ID="SetFollowMode" strategy_type="{strategy_type}"/>
							</ReactiveSequence>
							<ReactiveSequence>
								<Inverter>
									<Condition ID="IfAllowedToOvertake" allowed_to_overtake="{allowed_to_overtake}"/>
								</Inverter>
								<Condition ID="IfUsePerception" rde_params="{rde_params}"/>
								<Condition ID="IfRivalCarExists" current_rival_car="{current_rival_car}"/>
								<Condition ID="IfRivalCarFront" current_rival_car="{current_rival_car}"/>
								<Condition ID="IfRivalCarFrontGapLesserThan" comparison_against="object_detection" current_rival_car="{current_rival_car}" rde_params="{rde_params}" />
								<Action ID="SetAttackerPreparingGap" gap_type="{gap_type}" rde_params="{rde_params}"/>
								<Action ID="SetFollowMode" strategy_type="{strategy_type}"/>
							</ReactiveSequence>
						</ReactiveFallback>
					</ForceSuccess>
					<ForceSuccess>
						<ReactiveSequence>
							<Condition ID="IfAllowedToOvertake" allowed_to_overtake="{allowed_to_overtake}"/>
							<Condition ID="IfUsePerception" rde_params="{rde_params}"/>
							<Condition ID="IfRivalCarExists" current_rival_car="{current_rival_car}"/>
							<Condition ID="IfRivalCarFront" current_rival_car="{current_rival_car}"/>
							<Condition ID="IfInBackStraight" rde_params="{rde_params}" pit_ttl_index="{pit_ttl_index}" current_car_state="{current_car_state}" />
							<Action ID="SetAttackerOvertakeStarted" rde_params="{rde_params}" attacker_overtake_started="{attacker_overtake_started}" target_value="true"/>
						</ReactiveSequence>
					</ForceSuccess>
				</ReactiveSequence>
				<ReactiveSequence> <!-- Attacker Flag, during overtake -->
					<Inverter>
						<ReactiveFallback>
							<Condition ID="IfInPitTtl" current_car_state="{current_car_state}" pit_ttl_index="{pit_ttl_index}"/>
							<Condition ID="IfAttackerOvertakeComplete" attacker_overtake_complete="{attacker_overtake_complete}"/>
						</ReactiveFallback>
					</Inverter>
					<Condition ID="IfAttackerFlag" current_flags="current_flags"/>
					<Condition ID="IfAttackerOvertakeStarted" attacker_overtake_started="{attacker_overtake_started}"/>
					<ReactiveFallback>
						<ReactiveSequence>
							<ReactiveFallback>
								<Condition ID="IfGreenSpeedFlag" current_flags="{current_flags}"/>
								<Condition ID="IfWgreenFlag" current_flags="{current_flags}"/>
							</ReactiveFallback>
							<Action ID="SetRoundCatchupSpeed" speed_type="{speed_type}" stop_type="{stop_type}" strategy_type="{strategy_type}"/>
						</ReactiveSequence>
						<ReactiveSequence>
							<Condition ID="IfGreenFlag" current_flags="{current_flags}"/>
							<Action ID="SetGreenSpeed" rde_params="rde_params" speed_type="{speed_type}" stop_type="{stop_type}" strategy_type="{strategy_type}"/>
						</ReactiveSequence>
					</ReactiveFallback>
					<Action ID="SetNoGap" gap_type="{gap_type}" rde_params="{rde_params}"/>
					<ForceSuccess>
						<ReactiveFallback>
							<ReactiveSequence>
								<Condition ID="IfUsePerception" rde_params="{rde_params}"/>
								<Condition ID="IfRivalCarExists" current_rival_car="{current_rival_car}"/>
								<ReactiveFallback>
									<ReactiveSequence>
										<Condition ID="IfRivalCarExists" current_rival_car="{current_rival_car}"/>
										<Condition ID="IfRivalCarLeft" current_rival_car="{current_rival_car}" left_ttl_index="{left_ttl_index}"/>
										<Action ID="SetRightTtlIndex" rde_params="{rde_params}" selected_ttl="{selected_ttl}"/>
									</ReactiveSequence>
									<ReactiveSequence>
										<Condition ID="IfRivalCarExists" current_rival_car="{current_rival_car}"/>
										<Condition ID="IfRivalCarRight" current_rival_car="{current_rival_car}" right_ttl_index="{right_ttl_index}"/>
										<Action ID="SetLeftTtlIndex" rde_params="{rde_params}" selected_ttl="{selected_ttl}"/>
									</ReactiveSequence>
								</ReactiveFallback>
							</ReactiveSequence>
						</ReactiveFallback>
					</ForceSuccess>
					<ForceSuccess>
						<ReactiveSequence>
							<Condition ID="IfUsePerception" rde_params="{rde_params}"/>
							<Condition ID="IfRivalCarExists" current_rival_car="{current_rival_car}"/>
							<Condition ID="IfRivalCarBack" current_rival_car="{current_rival_car}"/>
							<Condition ID="IfRivalCarBackGapGreaterThan" comparison_against="defender_overtaken" current_rival_car="{current_rival_car}" rde_params="{rde_params}" />
							<Action ID="SetAttackerOvertakeComplete" rde_params="{rde_params}" attacker_overtake_complete="{attacker_overtake_complete}" target_value="true"/>
						</ReactiveSequence>
					</ForceSuccess>
				</ReactiveSequence>
				<ReactiveSequence> <!-- Attacker Flag, overtake complete -->
					<Inverter>
						<Condition ID="IfInPitTtl" current_car_state="{current_car_state}" pit_ttl_index="{pit_ttl_index}"/>
					</Inverter>
					<Condition ID="IfAttackerFlag" current_flags="current_flags"/>
					<Condition ID="IfAttackerOvertakeComplete" attacker_overtake_complete="{attacker_overtake_complete}"/>
					<ReactiveFallback>
						<ReactiveSequence>
							<ReactiveFallback>
								<Condition ID="IfGreenSpeedFlag" current_flags="{current_flags}"/>
								<Condition ID="IfWgreenFlag" current_flags="{current_flags}"/>
							</ReactiveFallback>
							<Action ID="SetRoundSpeed" speed_type="{speed_type}" stop_type="{stop_type}" strategy_type="{strategy_type}"/>
						</ReactiveSequence>
						<ReactiveSequence>
							<Condition ID="IfGreenFlag" current_flags="{current_flags}"/>
							<Action ID="SetGreenSpeed" rde_params="rde_params" speed_type="{speed_type}" stop_type="{stop_type}" strategy_type="{strategy_type}"/>
						</ReactiveSequence>
					</ReactiveFallback>
					<ForceSuccess>
						<ReactiveSequence>
							<Condition ID="IfInRoundSpeedRange" rde_inputs="{rde_inputs}" current_car_state="{current_car_state}"/>
							<Action ID="SetRaceTtlIndex" rde_params="{rde_params}" selected_ttl="{selected_ttl}"/>
						</ReactiveSequence>
					</ForceSuccess>
					<Action ID="SetNoGap" gap_type="{gap_type}" rde_params="{rde_params}"/>
				</ReactiveSequence>
				<!-- Stop car otherwise -->
				<Action ID="StopCarSafe" rde_params="{rde_params}" speed_type="{speed_type}" stop_type="{stop_type}" strategy_type="{strategy_type}"/>
				<Action ID="SetNoGap" gap_type="{gap_type}" rde_params="{rde_params}"/>
			</ReactiveFallback>
			<!-- Enter and Exit pit ttl logic -->
			<ForceSuccess>
				<ReactiveFallback>
					<ReactiveSequence>
						<Condition ID="IfInPitTtl" current_car_state="{current_car_state}" pit_ttl_index="{pit_ttl_index}"/>
						<Inverter>
							<Condition ID="IfBlackFlag" current_flags="{current_flags}"/>
						</Inverter>
						<Condition ID="IfInPitExit" current_car_state="{current_car_state}" pit_ttl_index="{pit_ttl_index}"/>
						<Action ID="SetRaceTtlIndex" rde_params="{rde_params}" selected_ttl="{selected_ttl}"/>
					</ReactiveSequence>
					<ReactiveSequence>
						<Inverter>
							<Condition ID="IfInPitTtl" current_car_state="{current_car_state}" pit_ttl_index="{pit_ttl_index}"/>
						</Inverter>
						<Condition ID="IfBlackFlag" current_flags="{current_flags}"/>
						<ForceSuccess>
							<ReactiveSequence>
								<Condition ID="IfInBackStraight" current_car_state="{current_car_state}" pit_ttl_index="{pit_ttl_index}" rde_params="{rde_params}"/>
								<Action ID="SetYellowSpeed" rde_params="{rde_params}" speed_type="{speed_type}" stop_type="{stop_type}" strategy_type="{strategy_type}"/>
							</ReactiveSequence>
						</ForceSuccess>
						<Condition ID="IfInYellowSpeedRange" rde_params="{rde_params}" current_car_state="{current_car_state}"/>
						<ForceSuccess>
							<ReactiveSequence>
								<Condition ID="IfInBackStraight" current_car_state="{current_car_state}" pit_ttl_index="{pit_ttl_index}" rde_params="{rde_params}"/>
								<Action ID="SetLeftTtlIndex" rde_params="{rde_params}" selected_ttl="{selected_ttl}"/>
							</ReactiveSequence>
						</ForceSuccess>
						<ForceSuccess>
							<ReactiveSequence>
								<Condition ID="IfInLeftTtl" current_car_state="{current_car_state}" left_ttl_index="{left_ttl_index}"/>>
								<Condition ID="IfInPitEntrance" current_car_state="{current_car_state}" pit_ttl_index="{pit_ttl_index}"/>
								<Action ID="SetPitTtlIndex" rde_params="{rde_params}" selected_ttl="{selected_ttl}"/>
							</ReactiveSequence>
						</ForceSuccess>
					</ReactiveSequence>
					<ReactiveSequence>
						<Inverter>
							<Condition ID="IfInPitTtl" current_car_state="{current_car_state}" pit_ttl_index="{pit_ttl_index}"/>
						</Inverter>
						<Condition ID="IfBlackFlag" current_flags="{current_flags}"/>
						<Condition ID="IfInLeftTtl" left_ttl_index="{left_ttl_index}" current_car_state="{current_car_state}"/>
						<ForceSuccess>
							<ReactiveSequence>
								<Condition ID="IfInBackStraight" current_car_state="{current_car_state}" pit_ttl_index="{pit_ttl_index}" rde_params="{rde_params}"/>
								<Action ID="SetYellowSpeed" rde_params="{rde_params}" speed_type="{speed_type}" stop_type="{stop_type}" strategy_type="{strategy_type}"/>
							</ReactiveSequence>
						</ForceSuccess>
						<Action ID="SetLeftTtlIndex" rde_params="{rde_params}" selected_ttl="{selected_ttl}"/>
					</ReactiveSequence>
				</ReactiveFallback>
			</ForceSuccess>
			<!-- Set Autonomous and Limit Auto Throttle -->
			<ReactiveFallback> 
				<ReactiveSequence>
					<Condition ID="IfInputManualCommandTimeout" rde_inputs="{rde_inputs}" rde_params="{rde_params}"/>
					<Action ID="GoJoystickAutonomous" auto_enabled="{auto_enabled}" limit_auto_throttle="{limit_auto_throttle}" rde_params="{rde_params}"/>
				</ReactiveSequence>
				<Action ID="KeepJoystickState" auto_enabled="{auto_enabled}" limit_auto_throttle="{limit_auto_throttle}" rde_inputs="{rde_inputs}"/>
			</ReactiveFallback>
			<Action ID="SetTtlIndex" left_ttl_index="{left_ttl_index}" optimal_ttl_index="{optimal_ttl_index}" output_ttl_index="{output_ttl_index}" pit_ttl_index="{pit_ttl_index}" race_ttl_index="{race_ttl_index}" rde_params="{rde_params}" right_ttl_index="{right_ttl_index}" selected_ttl="{selected_ttl}"/>
			<Action ID="SetSpeedLimit" current_round_speed="{current_round_speed}" rde_params="{rde_params}" speed_limit="{speed_limit}" speed_type="{speed_type}"/>
			<!-- Set the Scale Factor-->
			<ForceSuccess> 
				<ReactiveFallback>
					<ReactiveSequence>
						<Condition ID="IfScaleFactorEnabled" rde_params="{rde_params}"/>
						<ReactiveFallback>
							<ReactiveSequence>
								<Condition ID="IfInPitTtl" current_car_state="{current_car_state}" pit_ttl_index="{pit_ttl_index}"/>
								<Action ID="ResetScaleFactor" rde_params="{rde_params}" scale_factor="{scale_factor}"/>
							</ReactiveSequence>
							<Action ID="SetScaleFactorFromLookup" current_car_state="{current_car_state}" rde_params="{rde_params}" scale_factor="{scale_factor}" sf_index="{sf_index}"/>
						</ReactiveFallback>
					</ReactiveSequence>
					<Action ID="ResetScaleFactor" rde_params="{rde_params}" scale_factor="{scale_factor}"/>
				</ReactiveFallback>
			</ForceSuccess>
			<Action ID="SetGap" gap_type="{gap_type}" rde_params="{rde_params}" target_gap="{target_gap}"/>
		</ReactiveSequence>
	</BehaviorTree>
</root>
